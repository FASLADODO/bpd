classdef BPD
 methods(Static = true)
  
  function code = encodeb(v,pairs,rfield,stip)
   
   s_ = floor(9*sqrt(stip(4)));
   t_ = floor(9*sqrt(stip(5)));
   
   y0 = stip(1);
   x0 = stip(2);
   t0 = stip(3);
   
   
   rfield = rfield{s_,t_};
   
   ry = floor((1:s_)+y0-s_/2);
   rx = floor((1:s_)+x0-s_/2);
   rt = floor((1:t_+1)+t0-t_/2);
   
   sv = v(ry,rx,rt);
   
   sv = abs(diff(sv,[],3));
   
   sv = BDoG3D.flipvideo(sv);
   
   
%    [theta,phy] = BDoG3D.orientation(sv);
%    
%    
%    ry = floor((1:sqrt(2)*s_)+y0-sqrt(2)*s_/2);
%    rx = floor((1:sqrt(2)*s_)+x0-sqrt(2)*s_/2);
%    rt = floor((1:sqrt(2)*t_)+t0-sqrt(2)*t_/2);
%    
%    sv = v(ry,rx,rt);
%    
%    sv = BDoG3D.rotateVid(sv,theta,phy);
%    
%    ry = round((1:s_) + (numel(ry)-s_)/2);
%    rx = round((1:s_) + (numel(rx)-s_)/2);
%    rt = round((1:t_) + (numel(rt)-t_)/2);   
%    
%    sv = sv(ry,rx,rt);
   
   ks = cellfun(@(x,y,z,w) ...
    BDoG3D.rfieldS(sv,x,y,z,w),rfield(:,1),rfield(:,2),rfield(:,3),rfield(:,4),'UniformOutput',false);
   ks = cell2mat(ks);

   pairs_x = ks(pairs(:,1));
   pairs_y = ks(pairs(:,2));
   
   code = pairs_x > pairs_y;
   
   dff = abs(pairs_x - pairs_y);
   dff = dff < 0.01;
   
   code = code';
   code(dff) = false;
  end
  
  function code = encode(v,pttn,stip)
   
   
   s_ = floor(9*sqrt(stip(4)));
   t_ = floor(9*sqrt(stip(5)));
   
   y0 = stip(1);
   x0 = stip(2);
   t0 = stip(3);
   
   ry = floor((1:s_)+y0-s_/2);
   rx = floor((1:s_)+x0-s_/2);
   rt = floor((1:t_+1)+t0-t_/2);
   
   sv = v(ry,rx,rt);
   
   sv = abs(diff(sv,[],3));
   
   sv = BDoG3D.flipvideo(sv);
   
   codea = BDoG3D.subencCAT(sv,pttn,32);
   
   Y = BDoG3D.splitInt(size(sv,1),2);
   X = BDoG3D.splitInt(size(sv,2),2);
   T = BDoG3D.splitInt(size(sv,3),2);
   
   sv = mat2cell(sv,Y,X,T);
   
   codeb = cellfun(@(var) BDoG3D.subencCAT(var,pttn,4),sv,'UniformOutput',false);
   
   codeb = cell2mat(codeb(:));
   
   
   code = [codea',codeb'];
   
  end
  
  function code = subencCAT(sv,pttn,n)
   
   Y = BDoG3D.splitInt(size(sv,1),4);
   X = BDoG3D.splitInt(size(sv,2),4);
   T = BDoG3D.splitInt(size(sv,3),2);
   
   sv = mat2cell(sv,Y,X,T);
   
   sva = sv(:,:,1);
   sva = sva(:);
   sva = cellfun(@(x) BDoG3D.mergepx(x),sva,'UniformOutput',false);
   
   svb = sv(:,:,2);
   svb = svb(:);
   svb = cellfun(@(x) BDoG3D.mergepx(x),svb,'UniformOutput',false);
   
   ksax = cellfun(@(var) BDoG3D.pttnscan(sva,var),pttn(1:n,1),'UniformOutput',false);
   ksay = cellfun(@(var) BDoG3D.pttnscan(sva,var),pttn(1:n,2),'UniformOutput',false);
   
   ksbx = cellfun(@(var) BDoG3D.pttnscan(svb,var),pttn(1:n,1),'UniformOutput',false);
   ksby = cellfun(@(var) BDoG3D.pttnscan(svb,var),pttn(1:n,2),'UniformOutput',false);
   
   ksax = cellfun(@mean ,ksax);
   ksay = cellfun(@mean ,ksay);
   
   ksbx = cellfun(@mean ,ksbx);
   ksby = cellfun(@mean ,ksby);
   
   pairs_x = ksax+ksby;
   pairs_y = ksay+ksbx;
   
   code = pairs_x > pairs_y;
   
   %codea = pairs_x > pairs_y;
   %codea = codea';
   
   
   %pairs_x = ksax+ksbx;
   %pairs_y = ksay+ksby;
   
   %codeb = pairs_x > pairs_y;
   %codeb = codeb';
   
   %code = codeb;
   
   %code = [codea,codeb];
   
  end

  function code = encodeBEST(v,fields,stip)
   
   
   s_ = floor(9*sqrt(stip(4)));
   t_ = floor(9*sqrt(stip(5)));
   
   scan = fields{s_,t_};
   
   y0 = stip(1);
   x0 = stip(2);
   t0 = stip(3);
   
   ry = floor((1:s_)+y0-s_/2);
   rx = floor((1:s_)+x0-s_/2);
   rt = floor((1:t_+1)+t0-t_/2);
   
   sv = v(ry,rx,rt);
   
   sv = abs(diff(sv,[],3));
   
   sv = BDoG3D.flipvideo(sv);
   
   sv = double(sv(:));
   
   
   %tic
   code = cellfun(@(y,x) BDoG3D.subenc(sv,y,x),scan(:,1),scan(:,2));
   
   
   %toc
   
   code = code';
   
  end
  
  function test = subenc(sv,scanx,scany)
   scanx = mexmean(sv(scanx));
   scany = mexmean(sv(scany));
   %scanx = mean(sv(scanx));
   %scany = mean(sv(scany));
   test = scanx > scany;
  end
  
  
  function fields = getPatterns(stip)
   fields = cell(32);
   stip = sqrt(stip);
   
   pttn = BDoG3D.pttnfield();
   
   while(~isempty(stip))
    s_ = floor(9 * stip(1,4));
    t_ = floor(9 * stip(1,5));
    
    v = zeros(s_,s_,t_);
    
    Y = BDoG3D.splitInt(size(v,1),4);
    X = BDoG3D.splitInt(size(v,2),4);
    T = BDoG3D.splitInt(size(v,3),2);
    
    v = mat2cell(v,Y,X,T);
    
    pn = true;
    
    for t = 1:2
     c = 0;
     for x = 1:4
      for y = 1:4
       if pn
        c = c+1;
       else
        c = c-1;
       end
       sv = v{y,x,t};
       sv(:,:,:) = c;
       v{y,x,t} = sv;
      end
     end
     pn = false;
    end
    
    v = cell2mat(v);
    
    v = v(:);
    
    scan = cell(64,2);
    n = 0;
    
    for k = 1:size(pttn,1)
     
     spttn = pttn{k,1}';
     
     idx1 = false(numel(v),1);
     
     for j = spttn
      idx1 = or(idx1,abs(v) == j);
     end
     
     spttn = pttn{k,2}';
     
     idx2 = false(numel(v),1);
     
     for j = spttn
      idx2 = or(idx2,abs(v) == j);
     end
     
     n = n+1;
     
     scan(n,:) = {idx1,idx2};
     
    end
    
    
    for k = 1:size(pttn,1)
     
     idx1 = false(numel(v),1);
     
     spttn = pttn{k,1}';
     
     for j = spttn
      idx1 = or(idx1,v == j);
     end
     
     spttn = pttn{k,2}';
     
     for j = spttn
      idx1 = or(idx1,v == -j);
     end
     
     
     idx2 = false(numel(v),1);
     
     spttn = pttn{k,2}';
     
     for j = spttn
      idx2 = or(idx2,v == j);
     end
     
     spttn = pttn{k,1}';
     
     for j = spttn
      idx2 = or(idx2,v == -j);
     end
     
     
     n = n+1;
     
     scan(n,:) = {idx1,idx2};
     
    end    
  
    
    fields{s_,t_} = scan;
    stip(and(stip(:,4) == stip(1,4),stip(:,5) == stip(1,5)),:) = [];
   end
  end
  
  
  function ks = pttnscan(sv,idx)
   ks = sv(idx);
   ks = vertcat(ks{:});
  end
  
  function px = mergepx(c)
   px = c(:);
  end
  
  
  function v = flipvideo(v)

   o = [0,pi/2,pi,3*pi/2];
   o = cos(o) + 1j * sin(o);
   
   [Y,X,T] = size(v);
   
   hv = v(:,:,1:floor(T/2));
   
   [r,~] = BDoG3D.xytSpV(Y,X,1);
   
   hv = sum(hv,3);
   
   hv = hv(:);
   
   x = hv .* r(:,1);
   y = hv .* r(:,2);
   
   c = sum([y,x])/(sum(hv)) - [Y,X]/2;
   
   c = c(1)+1j*c(2);
   c = c/abs(c);
   
   o = o-c;
   
   o = o .* conj(o);
   
   [~,o] = min(o);
   
   switch o
    case 1
     v =  fliplr(v);
    case 2
     v =  flipud(v);
    otherwise
    return
   end
   
   
  end
  
  function v = rotateVideoVolume(v,t_,p_)
   
   sz = size(v);
   
   [r,~] = BDoG3D.xytSpV(sz(1),sz(2),sz(3));
   
   T = [...
    cos(t_)*cos(p_) ,-sin(t_) ,-cos(t_)*sin(p_);...
    sin(t_)*cos(p_) , cos(t_) ,-sin(t_)*sin(p_);...
    sin(p_)         ,0        ,cos(p_);...
    ];
   
   
   p = r;
   
   r(:,1) = r(:,1)-sz(1)/2;
   r(:,2) = r(:,2)-sz(2)/2;
   r(:,3) = r(:,3)-sz(3)/2;
   
   r = r';
   r = T * r;
   r = r';
   
   r(:,1) = r(:,1)+sz(1)/2;
   r(:,2) = r(:,2)+sz(2)/2;
   r(:,3) = r(:,3)+sz(3)/2;
   
   r = round(r);
   
   r(r(:,1) < 1,:) = 1;
   r(r(:,2) < 1,:) = 1;
   r(r(:,3) < 1,:) = 1;
   r(r(:,1) > sz(1),:) = 1;
   r(r(:,2) > sz(2),:) = 1;
   r(r(:,3) > sz(3),:) = 1;
   
   u = v;
   
   for k = 1:size(p,1)
    u(p(k,1),p(k,2),p(k,3)) = v(r(k,1),r(k,2),r(k,3));
   end
   
   v = u;
   
  end
  
  function v = rotateVid(v,t_,p_)
   
   sz = size(v);
   
   [r,~] = BDoG3D.xytSpV(sz(1),sz(2),sz(3));
   
   T = [...
    cos(t_)*cos(p_) ,-sin(t_) ,-cos(t_)*sin(p_);...
    sin(t_)*cos(p_) , cos(t_) ,-sin(t_)*sin(p_);...
    sin(p_)         ,0        ,cos(p_);...
    ];
   
   p = r;
   
   r(:,1) = r(:,1)-sz(1)/2;
   r(:,2) = r(:,2)-sz(2)/2;
   r(:,3) = r(:,3)-sz(3)/2;
   
   r = r';
   r = T * r;
   r = r';
   
   r(:,1) = r(:,1)+sz(1)/2;
   r(:,2) = r(:,2)+sz(2)/2;
   r(:,3) = r(:,3)+sz(3)/2;
   
   r = round(r);
   
   r(r(:,1) < 1,:) = 1;
   r(r(:,2) < 1,:) = 1;
   r(r(:,3) < 1,:) = 1;
   r(r(:,1) > sz(1),:) = 1;
   r(r(:,2) > sz(2),:) = 1;
   r(r(:,3) > sz(3),:) = 1;
   
   %v(1,1,1) = max(v(:));
   v(1,1,1) = 0;
   
   u = v;
   
   for k = 1:size(p,1)
    u(p(k,1),p(k,2),p(k,3)) = v(r(k,1),r(k,2),r(k,3));
   end
   
   v = u;
   
  end
  
  function [t_,p_] = orientation(v)
   
   sz = size(v);
   
   [r,~] = BDoG3D.xytSpV(sz(1),sz(2),sz(3));
   
   v = v(:);
   x = v .* r(:,1);
   y = v .* r(:,2);
   t = v .* r(:,3);
   
   c = sum([y,x,t])/(sum(v)) - sz/2;
   
   t_ = atan2(c(1),c(2));
   p_ = atan2(norm(c),c(3));
   
  end
  
  
  function field = pttnfield()
   
   field = cell(32,2);
   
   field(01,:) = {[1;2;3;4;5;6;7;8],[9;10;11;12;13;14;15;16]};
   field(02,:) = {[1;5;9;13;2;6;10;14],[3;7;11;15;4;8;12;16]};
   field(03,:) = {[1;5;2;6;11;15;12;16],[9;13;10;14;3;7;4;8]};
   field(04,:) = {[1;5;9;13;4;8;12;16],[2;6;10;14;3;7;11;15]};
   field(05,:) = {[1;2;3;4;9;10;11;12],[5;6;7;8;13;14;15;16]};
   
   field(06,:) = {[1;2;3;4;13;14;15;16],[5;6;7;8;9;10;11;12]};
   field(07,:) = {[1;5;9;13;3;7;11;15],[2;6;10;14;4;8;12;16]};
   field(08,:) = {[2;6;3;7;9;13;12;16],[1;5;10;11;14;15;4;8]};
   field(09,:) = {[1;2;7;8;11;12;13;14],[3;4;5;6;9;10;15;16]};
   field(10,:) = {[1;4;6;7;10;11;13;16],[2;3;5;9;8;12;14;15]};
   
   
   field(11,:) = {[1;5;3;7;13;14;12;16],[2;6;4;8;9;13;11;15]};
   field(12,:) = {[1;2;7;8;9;10;15;16],[3;4;5;6;11;12;13;14]};
   field(13,:) = {[1;3;6;10;8;12;13;15],[2;4;5;6;7;11;14;16]};
   field(14,:) = {[1;4;6;7;9;11;14;16],[2;4;5;7;10;12;13;15]};
   field(15,:) = {[1;3;6;8;9;11;14;16],[2;4;5;7;10;12;13;15]};

   field(16,:) = {[1;2;5;6],[3;7;4;8]};
   field(17,:) = {[9;13;10;14],[11;15;12;16]};
   field(18,:) = {[1;2;3;4],[5;6;7;8]};
   field(19,:) = {[9;10;11;12],[13;14;15;16]};
   field(20,:) = {[1;5;3;7],[2;6;4;8]};

   field(21,:) = {[10;14;12;16],[9;13;11;15]};
   field(22,:) = {[1;5;2;6],[9;13;10;14]};
   field(23,:) = {[3;7;4;8],[11;15;12;16]};
   field(24,:) = {[1;5;9;13],[2;6;10;14]};
   field(25,:) = {[3;7;11;15],[4;8;12;16]};
 
   field(26,:) = {[1;2;9;10],[5;6;13;14]};
   field(27,:) = {[3;4;11;12],[7;8;15;16]};
   field(28,:) = {[1;5;2;6],[11;15;12;16]};
   field(29,:) = {[3;7;4;8],[9;10;13;14]};
   field(30,:) = {[1;5;4;8],[10;11;14;15]};

   field(31,:) = {[1;2;13;14],[7;11;8;12]};
   field(32,:) = {[2;3;14;15],[5;9;8;12]};
  
  end
  
  function s = splitInt(a,n)
   x = floor(a/n);
   s = x * ones(n,1);
   m = 0;
   while sum(s) ~= a
    m = m+1;
    s(m) = s(m)+1;
   end
  end
  
 end
end